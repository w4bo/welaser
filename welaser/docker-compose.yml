# When deploying to a production environment, please refer to the Helm Repository
# for FIWARE Components in order to scale up to a proper architecture:
# see: https://github.com/FIWARE/helm-charts/

version: "3.9"
services:
  # Orion is the context broker
  orion:
    init: true
    restart: always
    image: fiware/orion:3.8.1              # This variable `${ORION_VERSION}` is drawn from the `.env` file
    hostname: orion                        # Container's name within the network (e.g., `ping orion` is a valid command)
    container_name: orion                  # Name of the created container (e.g., `docker exec -it orion /bin/bash` or `docker logs orion`)
    depends_on:
      - mongo-db                           # Create the `mongo-db` before this container
    networks:
      - default                            # Name of the Docker network
    expose:
      - "${ORION_PORT_INT}"                    # Port that is accessible from outside the container
    ports:
      - "${ORION_PORT_EXT}:${ORION_PORT_INT}"  # Map a local port to a container's port (e.g., `IP:8082` to `IP:1026`)
    # Append this string to the final command that is executed by the container
    # Here, we are launching the OCB with: the possibility to perform "cors" requests, the name of the database, and the maximum payload parameter
    # You can also set the log level by adding `-logLevel DEBUG`
    command: -corsOrigin __ALL -dbhost mongo-db -inReqPayloadMaxSize ${ORION_MAX_PAYLOAD}
    healthcheck: # Every 5seconds do a request to the OCB to ensure that the OCB is running
      # test: curl --fail -s http://${ORION_IP}:${ORION_PORT_EXT}/version
      test: curl --fail -s http://${ORION_IP}:${ORION_PORT_EXT}/v2/entities?options=keyValues&limit=1 #
      interval: 5s
      timeout: 10s

  iot-agent:
    init: true
    restart: always
    build:
      context: ./devices
      dockerfile: iota.Dockerfile
    hostname: iot-agent
    container_name: iot-agent
    depends_on:
      - mosquitto
    networks:
      - default
    expose:
      - "${IOTA_PORT_EXT}"
    ports:
      - "${IOTA_PORT_EXT}:${IOTA_PORT_EXT}"
    healthcheck:
      test: curl --fail -s http://${IOTA_IP}:${IOTA_PORT_EXT}
      interval: 5s
      timeout: 10s

  # Database (orion + persistence)
  mongo-db:
    init: true
    restart: always
    image: mongo:6.0
    hostname: mongo-db
    container_name: mongo-db
    expose:
      - "${MONGO_DB_PERS_PORT_INT}"
    ports:
      - "${MONGO_DB_PERS_PORT_EXT}:${MONGO_DB_PERS_PORT_INT}" # 27017
    networks:
      - default
    # volumes: # Specify that the `/data` folder **inside** the container is mapped to the volume `mongo-db`
    #   - ./mounts/mongodb:/data/db
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`;
        mongo --quiet $${host}/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 5s
      timeout: 10s

  # MQTT Broker
  mosquitto:
    init: true
    image: eclipse-mosquitto:2.0.11
    hostname: mosquitto
    container_name: mosquitto
    expose:
      - "${MOSQUITTO_PORT_EXT}"
      - "9001"
    ports:
      - "${MOSQUITTO_PORT_EXT}:${MOSQUITTO_PORT_INT}"
      - "9001:9001"
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mosquitto/pwfile:/mosquitto/config/pwfile
    networks:
      - default

  # Web server
  node:
    init: true
    restart: always
    hostname: node
    container_name: node
    build: ./service-dashboard
    ports:
      - "${WEB_SERVER_PORT_EXT}:${WEB_SERVER_PORT_INT}"
    networks:
      - default
    volumes:
      - ./service-dashboard:/code
    env_file:
      - .env
    healthcheck:
      test: curl --fail -s http://localhost:${WEB_SERVER_PORT_INT}
      interval: 5s
      timeout: 10s

  portainer:
    init: true
    hostname: portainer
    container_name: portainer
    image: portainer/portainer-ce:latest
    ports:
      - 9443:9443
    volumes:
        - ./mounts/portainer:/data
        - /var/run/docker.sock:/var/run/docker.sock
    restart: always

  etl:
    init: true
    restart: always
    hostname: etl
    build: ./etl
    container_name: etl
    expose:
      - "${DRACO_PORT_EXT}"
    ports:
      - "${DRACO_PORT_EXT}:${DRACO_PORT_EXT}"
    networks:
      - default
    env_file:
      - .env
    healthcheck:
      test: |
        curl --fail -H 'Content-Type: application/json' -d '{"heartbeat": ""}' -s http://${DRACO_IP}:${DRACO_PORT_EXT}
      interval: 5s
      timeout: 10s

  missionplanner:
    init: true
    hostname: missionplanner
    build: ./service-missionplanner
    container_name: missionplanner
    expose:
      - "${PLANNER_PORT_EXT}"
    ports:
      - "${PLANNER_PORT_EXT}:${PLANNER_PORT_EXT}"
    networks:
      - default
    env_file:
      - .env
    healthcheck:
      test: |
        curl --fail -H 'Content-Type: application/json' -d '{"heartbeat": ""}' -s http://${PLANNER_IP}:${PLANNER_PORT_EXT}
      interval: 5s
      timeout: 10s

  mapbuilder:
    init: true
    hostname: mapbuilder
    build: ./service-mapbuilder
    container_name: mapbuilder
    expose:
      - "${BUILDER_PORT_EXT}"
    ports:
      - "${BUILDER_PORT_EXT}:${BUILDER_PORT_EXT}"
    networks:
      - default
    env_file:
      - .env
    healthcheck:
      test: |
        curl --fail -H 'Content-Type: application/json' -d '{"heartbeat": ""}' -s http://${BUILDER_IP}:${BUILDER_PORT_EXT}
      interval: 5s
      timeout: 10s

  kafkaproxy:
    init: true
    restart: always
    hostname: kafkaproxy
    container_name: kafkaproxy
    build: ./service-kafkaproxy
    ports:
      - "${PROXY_PORT_EXT}:${PROXY_PORT_INT}"
    networks:
      - default
    volumes:
      - ./service-kafkaproxy:/code
    env_file:
      - .env
    healthcheck:
      test: npm test
      interval: 60s
      timeout: 60s

  writeimages:
    init: true
    restart: always
    hostname: writeimages
    build:
      context: ./devices
      dockerfile: writeimages.Dockerfile
    container_name: writeimages
    networks:
      - default
    env_file:
      - .env
    depends_on:
      mongo-db:
        condition: service_healthy

  writetomongo:
    init: true
    restart: always
    hostname: writetomongo
    build:
      context: ./devices
      dockerfile: writetomongo.Dockerfile
    container_name: writetomongo
    networks:
      - default
    env_file:
      - .env
    depends_on:
      mongo-db:
        condition: service_healthy

  device-python:
    init: true
    hostname: device-python
    build: ./devices-python
    container_name: device-python
    networks:
      - default
    env_file:
      - .env
    ports:
      - "12346-13000:12346-13000"
    depends_on:
      orion:
        condition: service_healthy

  nginx:
    hostname: nginx
    container_name: nginx
    init: true
    restart: always
    image: jetbrainsinfra/nginx-file-listing:0.2 # nginx:1.23.2
    ports:
      - "${IMAGESERVER_PORT_HTTP_EXT}:80"
      # - "${IMAGESERVER_PORT_HTTPS_EXT}:443"
    volumes:
      - "./mounts/images-dump:/mnt/data"
    # healthcheck:
    #   test: curl --fail -s http://localhost:80
    #   interval: 5s
    #   timeout: 10s

  ftp:
    hostname: ftp
    container_name: ftp
    init: true
    restart: always
    image: stilliard/pure-ftpd
    environment:
      FTP_USER_NAME: "${IMAGESERVER_USER}"
      FTP_USER_PASS: "${IMAGESERVER_PWD}"
      FTP_USER_HOME: "/data"
      FTP_PASSIVE_PORTS: "21000:21099"
      FTP_MAX_CLIENTS: 50
      FTP_MAX_CONNECTIONS: 20
      ADDED_FLAGS: "-d -d"
      PUBLICHOST: "${IMAGESERVER_IP}"
    volumes:
      - "./mounts/images-dump:/data"
    ports:
      - "${IMAGESERVER_PORT_FTP20_EXT}:20"
      - "${IMAGESERVER_PORT_FTP21_EXT}:21"
      - "21000-21099:21000-21099/tcp"
    # healthcheck:
    #   test: wget -O .dummy ftp://${IMAGESERVER_USER}:${IMAGESERVER_PWD}@localhost:21/.dummy
    #   interval: 5s
    #   timeout: 10s

networks:
  default_net:
    ipam:
      config:
        - subnet: 172.18.1.0/24
